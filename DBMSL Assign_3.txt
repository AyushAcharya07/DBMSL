1. Create a View1 to display List all customers in alphabetical order who have loan from Pune_Station branch.
Query:-> 
	create view view_1 as select loan.branch_name,borrower.cust_name from loan,borrower where loan.loan_no=borrower.loan_no and loan.branch_name="STATION";
	Query OK, 0 rows affected (0.02 sec)

	select * from view_1;
	+-------------+----------------+
	| branch_name | cust_name      |
	+-------------+----------------+
	| STATION     | RIDDHI SANGHVI |
	+-------------+----------------+
	1 row in set (0.01 sec)


2. Create View2 on branch table by selecting any two columns and perform insert,update,delete operations.
Query:->

	 create view view_2 as select branch_name,assets from branch;
	 Query OK, 0 rows affected (0.02 sec)


INSERTION:
	 insert into view_2 values("CHINCHWAD",2000000);
	 Query OK, 1 row affected (0.02 sec)


	  insert into view_2 values("KOTHRUD",1800000);
	  Query OK, 1 row affected (0.01 sec)

	 insert into view_2 values("SANGVI",1820000);
	 Query OK, 1 row affected (0.01 sec)

	 insert into view_2 values("ALANDI",1852000);
	 Query OK, 1 row affected (0.01 sec)

	 insert into view_2 values("AKKALKOT",555000);
	 Query OK, 1 row affected (0.01 sec)


	 select * from view_2;
	+-------------+---------+
	| branch_name | assets  |
	+-------------+---------+
	| AKKALKOT    |  555000 |
	| AKURDI      |  150000 |
	| ALANDI      | 1852000 |
	| CAMP        |  100000 |
	| CHINCHWAD   | 2000000 |
	| KHADKI      |  155000 |
	| KOTHRUD     | 1800000 |
	| NAVI MUMBAI |  105000 |
	| SANGVI      | 1820000 |
	| SANTA CRUZ  |  105000 |
	| STATION     |  155000 |
	+-------------+---------+
	11 rows in set (0.00 sec)


UPDATION:
	
	 update view_2 set assets="2000000" where branch_name="AKKALKOT";
	Query OK, 1 row affected (0.02 sec)
	Rows matched: 1  Changed: 1  Warnings: 0

	 update view_2 set assets="500000" where branch_name="ALANDI";
	Query OK, 1 row affected (0.01 sec)
	Rows matched: 1  Changed: 1  Warnings: 0

	update view_2 set assets="800000" where branch_name="STATION";
	Query OK, 1 row affected (0.01 sec)
	Rows matched: 1  Changed: 1  Warnings: 0

	select * from view_2;
	+-------------+---------+
	| branch_name | assets  |
	+-------------+---------+
	| AKKALKOT    | 2000000 |
	| AKURDI      |  150000 |
	| ALANDI      |  500000 |
	| CAMP        |  100000 |
	| CHINCHWAD   | 2000000 |
	| KHADKI      |  155000 |
	| KOTHRUD     | 1800000 |
	| NAVI MUMBAI |  105000 |
	| SANGVI      | 1820000 |
	| SANTA CRUZ  |  105000 |
	| STATION     |  800000 |
	+-------------+---------+
	11 rows in set (0.00 sec)


DELETION:

	 delete from view_2 where branch_name="SANGVI";
	Query OK, 1 row affected (0.01 sec)

	delete from view_2 where branch_name="ALANDI";
	Query OK, 1 row affected (0.00 sec)

	select * from view_2;
	+-------------+---------+
	| branch_name | assets  |
	+-------------+---------+
	| AKKALKOT    | 2000000 |
	| AKURDI      |  150000 |
	| CAMP        |  100000 |
	| CHINCHWAD   | 2000000 |
	| KHADKI      |  155000 |
	| KOTHRUD     | 1800000 |
	| NAVI MUMBAI |  105000 |
	| SANTA CRUZ  |  105000 |
	| STATION     |  800000 |
	+-------------+---------+
	9 rows in set (0.00 sec)



3. Create View3 on borrower and depositor table by selecting any one column from each table perform insert update delete operations.
Query:->

	 create view view_3 as select borrower.cust_name,depositor.acc_no from borrower,depositor where borrower.cust_name=depositor.cust_name;
	Query OK, 0 rows affected (0.01 sec)

	 select * from view_3;
	+-------------------+--------+
	| cust_name         | acc_no |
	+-------------------+--------+
	| ADESH PARDESHI    |   1001 |
	| ANKITA KAMBLI     |   2001 |
	| APOORV SHAH       |   3001 |
	| NIDA SHAIKH       |   3002 |
	| PRIYANKA LOKHANDE |   3003 |
	| RIDDHI RUNWAL     |   2003 |
	| RIDDHI SANGHVI    |   1002 |
	| SHARVARI KULKARNI |   1003 |
	| YOJNA GADIYA      |   3004 |
	+-------------------+--------+
	9 rows in set (0.00 sec)



4. Create Union of left and right joint for all customers who have an account or loan or both at bank.
Query:->select customer.cust_name from customer left join borrower on customer.cust_name=borrower.cust_name union select customer.cust_name from customer right join borrower on customer.cust_name=borrower.cust_name;
+-------------------+
| cust_name         |
+-------------------+
| ADESH PARDESHI    |
| ANKITA KAMBLI     |
| APOORV SHAH       |
| DHIREN JAIN       |
| NIDA SHAIKH       |
| PRIYANKA LOKHANDE |
| RIDDHI RUNWAL     |
| RIDDHI SANGHVI    |
| SHARVARI KULKARNI |
| SIKHA JAISWAL     |
| SOHAM BHOJ        |
| YOJNA GADIYA      |
+-------------------+
12 rows in set (0.01 sec)


5.Display content of View1,View2,View3.
Query:->  
	
select * from view_1;
+-------------+----------------+
| branch_name | cust_name      |
+-------------+----------------+
| STATION     | RIDDHI SANGHVI |
+-------------+----------------+
1 row in set (0.03 sec)

 select * from view_2;
+-------------+---------+
| branch_name | assets  |
+-------------+---------+
| AKKALKOT    | 2000000 |
| AKURDI      |  150000 |
| CAMP        |  100000 |
| CHINCHWAD   | 2000000 |
| KHADKI      |  155000 |
| KOTHRUD     | 1800000 |
| NAVI MUMBAI |  105000 |
| SANTA CRUZ  |  105000 |
| STATION     |  800000 |
+-------------+---------+
9 rows in set (0.00 sec)

 select * from view_3;
+-------------------+--------+
| cust_name         | acc_no |
+-------------------+--------+
| ADESH PARDESHI    |   1001 |
| ANKITA KAMBLI     |   2001 |
| APOORV SHAH       |   3001 |
| NIDA SHAIKH       |   3002 |
| PRIYANKA LOKHANDE |   3003 |
| RIDDHI RUNWAL     |   2003 |
| RIDDHI SANGHVI    |   1002 |
| SHARVARI KULKARNI |   1003 |
| YOJNA GADIYA      |   3004 |
+-------------------+--------+
9 rows in set (0.05 sec)

6.Create Simple and Unique index.
Query:->

Simple Index
	create index index_1 on branch (branch_name);
	Query OK, 0 rows affected (0.51 sec)
	Records: 0  Duplicates: 0  Warnings: 0


	




Unique Index

 create unique index u_index on account (acc_no);
Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0


7. Display index Information.
Query:->


Simple index

show index from branch \G;
*************************** 1. row ***************************
        Table: branch
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: branch_name
    Collation: A
  Cardinality: 9
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
*************************** 2. row ***************************
        Table: branch
   Non_unique: 1
     Key_name: index_1
 Seq_in_index: 1
  Column_name: branch_name
    Collation: A
  Cardinality: 9
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
2 rows in set (0.00 sec)

ERROR:
No query specified


Unique index

mysql> show index from account \G;
*************************** 1. row ***************************
        Table: account
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: Acc_no
    Collation: A
  Cardinality: 11
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
*************************** 2. row ***************************
        Table: account
   Non_unique: 0
     Key_name: u_index
 Seq_in_index: 1
  Column_name: Acc_no
    Collation: A
  Cardinality: 11
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
*************************** 3. row ***************************
        Table: account
   Non_unique: 1
     Key_name: branch_name
 Seq_in_index: 1
  Column_name: branch_name
    Collation: A
  Cardinality: 6
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment:
Index_comment:
      Visible: YES
   Expression: NULL
3 rows in set (0.01 sec)

ERROR:
No query specified


8. Truncate table Customer. 
Query:->
 truncate table customer;
ERROR 1701 (42000): Cannot truncate a table referenced in a foreign key constraint (`bank`.`depositor`, CONSTRAINT `depositor_ibfk_1`)


9. Find names, costs, domains and quantities for companies using inner join.
Query:->

	 select name,cost,domain,quantity from companies inner join orders on companies.comp_id=orders.comp_id;
	+------+------+---------+----------+
	| name | cost | domain  | quantity |
	+------+------+---------+----------+
	| ONGC | 2000 | Oil     |      109 |
	| HPCL | 2500 | Gas     |      121 |
	| IOCL | 1000 | Telecom |      115 |
	+------+------+---------+----------+
	3 rows in set (0.00 sec)


10.Find names, costs, domains and quantities for companies using left outer join
Query:->

 select name,cost,domain,quantity from companies left outer join orders on companies.comp_id=orders.comp_id;
+------+------+---------+----------+
| name | cost | domain  | quantity |
+------+------+---------+----------+
| ONGC | 2000 | Oil     |      109 |
| HPCL | 2500 | Gas     |      121 |
| IOCL | 1000 | Telecom |      115 |
| BHEL | 3000 | NULL    |     NULL |
+------+------+---------+----------+
4 rows in set (0.00 sec)


11. Find names, costs, domains and quantities for companies using right outer join.
Query:->

 select name,cost,domain,quantity from companies right outer join orders on companies.comp_id=orders.comp_id;
+------+------+---------+----------+
| name | cost | domain  | quantity |
+------+------+---------+----------+
| ONGC | 2000 | Oil     |      109 |
| HPCL | 2500 | Gas     |      121 |
| IOCL | 1000 | Telecom |      115 |
+------+------+---------+----------+
3 rows in set (0.00 sec)


12. Find names, costs, domains and quantities for companies using Union operator
Query:->

 select name,cost,domain,quantity from companies left outer join orders on companies.comp_id=orders.comp_id
    -> union
    -> select name,cost,domain,quantity from companies right outer join orders on companies.comp_id=orders.comp_id;
+------+------+---------+----------+
| name | cost | domain  | quantity |
+------+------+---------+----------+
| ONGC | 2000 | Oil     |      109 |
| HPCL | 2500 | Gas     |      121 |
| IOCL | 1000 | Telecom |      115 |
| BHEL | 3000 | NULL    |     NULL |
+------+------+---------+----------+
4 rows in set (0.01 sec)


13. Create View View1 by selecting both tables to show company name and quantities.
Query:->
      create view View1
    -> as
    -> select companies.name,orders.quantity
    -> from companies,orders
    -> where companies.comp_id=orders.comp_id;
	Query OK, 0 rows affected (0.01 sec)

	

14. Display contents of View1.
Query:->

	mysql> select * from view1;
	+------+----------+
	| name | quantity |
	+------+----------+
	| ONGC |      109 |
	| HPCL |      121 |
	| IOCL |      115 |
	+------+----------+
	3 rows in set (0.00 sec)
